"""
Custom ViT with Conv Layer:
Trains a custom ViT model without pre-training
Adds a convolutional layer before the embedding
Uses 20% CIFAR-10 dataset
"""
import torch
import torch.nn as nn
from torchvision import datasets, transforms
from torch.utils.data import DataLoader, Subset
import timm
from torch.optim import Adam
import matplotlib.pyplot as plt

class FastCustomViT(nn.Module):
    def __init__(self, num_classes=10):
        super(FastCustomViT, self).__init__()
        
        # Simple conv layer before ViT
        self.conv_layer = nn.Sequential(
            nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1),
            nn.ReLU()
        )
        
        # Using tiny ViT for speed
        self.vit = timm.create_model(
            'vit_tiny_patch16_224',
            pretrained=False,
            num_classes=num_classes,
            in_chans=16
        )
    
    def forward(self, x):
        x = self.conv_layer(x)
        return self.vit(x)

def train_model(model, train_loader, val_loader, num_epochs=5):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"Using device: {device}")
    model = model.to(device)
    
    criterion = nn.CrossEntropyLoss()
    optimizer = Adam(model.parameters(), lr=0.001)
    
    for epoch in range(num_epochs):
        model.train()
        running_loss = 0.0
        
        # Training with progress indicator
        for i, (images, labels) in enumerate(train_loader):
            images, labels = images.to(device), labels.to(device)
            
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            
            running_loss += loss.item()
            
            if i % 20 == 0:
                print(f'Epoch [{epoch+1}/{num_epochs}], Step [{i}/{len(train_loader)}], Loss: {loss.item():.4f}')
        
        # Quick validation
        model.eval()
        correct = 0
        total = 0
        with torch.no_grad():
            for images, labels in val_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, predicted = outputs.max(1)
                total += labels.size(0)
                correct += predicted.eq(labels).sum().item()
        
        print(f'Epoch [{epoch+1}/{num_epochs}]')
        print(f'Average Loss: {running_loss/len(train_loader):.4f}')
        print(f'Accuracy: {100.*correct/total:.2f}%')
        print('-' * 50)

def main():
    # Basic transformations
    transform = transforms.Compose([
        transforms.Resize(224),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485], std=[0.229])
    ])
    
    # Load and subset CIFAR-10
    train_dataset = datasets.CIFAR10(root='./data', train=True, 
                                   download=True, transform=transform)
    test_dataset = datasets.CIFAR10(root='./data', train=False, 
                                  download=True, transform=transform)
    
    # Use only 20% of the data
    train_dataset = Subset(train_dataset, range(0, len(train_dataset), 5))
    test_dataset = Subset(test_dataset, range(0, len(test_dataset), 5))
    
    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=32)
    
    model = FastCustomViT(num_classes=10)
    train_model(model, train_loader, test_loader)
    
    # Save the model
    torch.save(model.state_dict(), 'fast_custom_vit.pth')

if __name__ == "__main__":
    main()
